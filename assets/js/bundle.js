---
---

var navbar = document.querySelector('#navbar');

function navbarDock() {
    var doc = document.documentElement;
    var left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
    var top = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);

    if (top < 10) navbar.classList.add('docked');
    else navbar.classList.remove('docked');
    if (top < 10) navbar.classList.remove('undocked');
    else navbar.classList.add('undocked');
}

var navbarBarsBtn = document.querySelector('#nav-bars-btn');
var sidebarWrapper = document.querySelector('#sidebar-wrapper');
var innerWrapper = document.querySelector('#inner-wrapper');
var navbarWrapper = document.querySelector('#navbar-wrapper');
var instagramFollowers = document.querySelector('#instagram-followers');
var sidebarSearch = document.querySelector('#navbar-search');
var searchOverlap = document.querySelector('#search-overlap');
var searchOverlapClose = document.querySelector('#search-overlap-close');
var articleAmount = document.querySelector('#article-amount');
var articleAmountMinus = document.querySelector('#article-amount-minus');
var articleAmountPlus = document.querySelector('#article-amount-plus');
var articleSize = document.querySelector('#article-size');
var searchTerm = document.querySelector('#search-term');
var searchResults = document.querySelector('#search-results');
var searchOverlapSearch = document.querySelector('#search-overlap-search');
var hitEnter = document.querySelector('#search-hit-enter');

navbarBarsBtn.addEventListener('click', function () {
    sidebarWrapper.classList.toggle('opened');
    sidebarWrapper.classList.toggle('closed');
    innerWrapper.classList.toggle('menu-open');
    navbarWrapper.classList.toggle('menu-open');
});

window.addEventListener('scroll', navbarDock);
navbarDock();

if (instagramFollowers) {
    fetch('https://randomuser.me/api?results=8').then(function (response) { return response.text(); })
        .then(function (text) {
            var json = JSON.parse(text);
            var fragment = document.createDocumentFragment();
            json.results.forEach(function (account, i) {
                var follower = createInstagramFollower(account.login.username, account.picture.large, i);
                fragment.appendChild(follower);
            });
            instagramFollowers.appendChild(fragment);
            console.log(json);
        });
}

// function generated by: https://html2js.esstudio.site/
function createInstagramFollower(accountName, thumbnailUrl, n) {
    var e_0 = document.createElement("div");
    e_0.setAttribute("class", "account" + (n >= 6 ? ' hidden-xs' : ''));
    var e_1 = document.createElement("img");
    e_1.setAttribute("src", thumbnailUrl);
    e_1.setAttribute("alt", "account-thumbnail");
    e_0.appendChild(e_1);
    var e_2 = document.createElement("p");
    e_2.setAttribute("class", "account-name");
    e_2.appendChild(document.createTextNode('@' + accountName));
    e_0.appendChild(e_2);
    return e_0;
}

if (sidebarSearch) {
    sidebarSearch.addEventListener('click', function() {
        searchOverlap.classList.toggle('overlap-open');
    });
}

if (searchOverlapClose) {
    searchOverlapClose.addEventListener('click', function() {
        searchOverlap.classList.toggle('overlap-open');
    })
}

if (articleAmount) {
    articleAmountMinus.addEventListener('click', function() {
        articleAmount.value = Math.min(+articleAmount.max, Math.max(+articleAmount.min, +articleAmount.value - 1));
    });
    articleAmountPlus.addEventListener('click', function() {
        articleAmount.value = Math.min(+articleAmount.max, Math.max(+articleAmount.min, +articleAmount.value + 1));
    });
}

if (articleSize) {
    articleSize.querySelectorAll('.article-size').forEach(function(size) {
        size.addEventListener('click', function() {
            articleSize.querySelectorAll('.article-size').forEach(function(size) {
                size.classList.remove('active');
            });
            size.classList.add('active');
        });
    });
}

function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
}

function excerpt(str, len) {
    return str.length > len ? str.slice(0, len - 3).trim() + "..." : str;
};

function decodeQuery(url, discardEmpty) {
    url = (url || window.location.href).split('?')[1].split('#')[0];
    var ret = {}, url, qKVP, qParts = url.split('&');
    for (var i = 0; i < qParts.length; i++) {
        qKVP = qParts[i].split('=');
        if (discardEmpty && (!qKVP[0] || !qKVP[1])) continue;
        ret[decodeURIComponent(qKVP[0])] = decodeURIComponent(qKVP[1]);
    }
    return ret;
}

if (searchTerm) {
    var pages =  [
        {% for article in site.articles %}{% if article.hide %}{% continue %}{% endif %}{
            "title": "{{ article.title }}",
            "categories": {{ article.categories | jsonify }},
            "tags": {{ article.tags | jsonify }},
            "collectionname": "{{ article.collectionname }}",
            "content": {{ article.content | jsonify }},
            "url": "{{ article.url }}",
            "description": {{ article.description | jsonify }},
            "image": "{{ article.image }}"
        }{% unless forloop.last %},{% endunless %}
        {% endfor %}
    ];
    var term = decodeQuery(window.location.href, true)['q'];
    searchTerm.innerText = term;
    var termRegex = new RegExp(escapeRegExp(term), 'gim');
    var maxContenLen = 200;

    var results = pages.map(function(page) {
        if (page.title && page.title.match(termRegex)) {
            var newTitle = page.title.replace(termRegex, function(m) { return '<mark>' + m + '</mark>' });
            return {
                title: newTitle,
                page: page,
                text: page.description || excerpt(page.content, maxContenLen)
            };
        } else if (page.content && page.content.match(termRegex)) {
            var newContent = page.content.replace(termRegex, function(m) { return '<mark>' + m + '</mark>' });
            var index = newContent.match(termRegex).index;
            return {
                title: page.title,
                page: page,
                text: excerpt(newContent.slice(index), maxContenLen)
            };
        } else if (page.description && page.description.match(termRegex)) {
            var newDescription = page.description.replace(termRegex, function(m) { return '<mark>' + m + '</mark>' });
            return {
                title: page.title,
                page: page,
                text: newDescription
            };
        } else if (page.categories && page.categories.join(' ').match(termRegex)) {
            return {
                title: page.title,
                page: page,
                text: page.description || excerpt(page.content, maxContenLen)
            };
        } else if (page.collectionname && page.collectionname.match(termRegex)) {
            return {
                title: page.title,
                page: page,
                text: page.description || excerpt(page.content, maxContenLen)
            };
        } else return null;
    }).filter(function(entry) { return entry !== null });

    var html = '';

    for(var i = 0; i < results.length; i++) {
        html += '<li class="result-item col-xs-6 col-sm-4">\
    <a href="' + results[i].page.url + '" title="' + results[i].text + '"><div class="overflow-hidden">\
    <img class="responsive zoom-effect" src="' + results[i].page.image + '"></div></a>\
    <a href="' + results[i].page.url + '"><h6 class="result-item-title">' + results[i].title + '</h6>\
    <p class="result-item-text">' + results[i].text + '</p></a>\
</li>';
    }

    if (results.length === 0) {
        html += '<li><h5 style="text-align: center">No products were found matching: "' + term + '".</h5></li>\
        <div class="no-search-results">NO PRODUCTS WERE FOUND MATCHING: "' + term + '".</div>';
    }

    searchResults.innerHTML = html;
    
}

if (searchOverlapSearch) {
    searchOverlapSearch.addEventListener('input', function() {
        hitEnter.classList.add('show');
    });
    searchOverlapSearch.addEventListener('blur', function() {
        hitEnter.classList.remove('show');
    });
}



